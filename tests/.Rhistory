mat_v <- Matern(dd,0.5,smoothness = 3.2, phi = 0)
mat_v[1:5,1:5]
mat_v <- Matern(dd,smoothness = 3.2, phi = 0)
mat_v[1:5,1:5]
mat_v <- Matern(x_d,0.5,smoothness = 3.2, phi = 0)
mat_v
d<- seq( 0,10,,200)
y<- Matern( d, range=1.5, smoothness=1.0)
d
y
dim(y)
Y
Matern(0,smootheness = 3.2, phi = 1)
mat_v <- Matern(dd,range=1)
mat_v
mat_v[1:5,1:5]
mat_v <- Matern(dd,range=1, smoothness = 5.5)
mat_v
mat_v
mat_v[1:5,1:5]
mat_v <- Matern(dd,range=10, smoothness = 5.5)
mat_v[1:5,1:5]
mat_v <- Matern(dd,range=0.02, smoothness = 5.5)
mat_v[1:5,1:5]
mat_v <- Matern(dd,range=0.10, smoothness = 5.5)
mat_v[1:5,1:5]
mat_v1 <- Matern(x_d,range = 0.5, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(x_d,range = 0.5, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(100)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(100)
mat_v1 <- Matern(x_d,range = 0.5, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(x_d,range = 0.5, smoothness = 1.2, phi = 1.0)
dim(mat_v1)
mat_v1 <- Matern(dd,range = 0.5, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.5, smoothness = 1.2, phi = 1.0)
dim(mat_v1)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(100)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(100)
library(plot3d)
install.packages("plot3D")
library(plot3D)
?points2D
scatter3D(x1,x2,mean1)
x1 <- runif(1000)
x2 <- runif(1000)
x_d <- cbind(x1,x2)
dd <- as.matrix(dist(x_d,upper= TRUE, diag= TRUE))
mat_v1 <- Matern(dd,range = 0.5, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.5, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(100)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(100)
library(plot3D)
scatter3D(x1,x2,mean1)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(1000)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(1000)
library(plot3D)
scatter3D(x1,x2,mean1)
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(1000)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(1000)
library(plot3D)
scatter3D(x1,x2,mean1)
k  = solve(mat_v)
library(plot3D)
scatter3D(x1,x2,mean2)
k  = solve(mat_v)
S     <- matrix(c(1.2,0.9,0.9,3),2,2)
cov2cor(S)
data <- t(chol(S))%*%matrix(rnorm(2*n),n,2)
library(fields)
n = 1000
x1 <- runif(n)
x2 <- runif(n)
x_d <- cbind(x1,x2)
dd <- as.matrix(dist(x_d,upper= TRUE, diag= TRUE))
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(n)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(n)
S     <- matrix(c(1.2,0.9,0.9,3),2,2)
data <- t(chol(S))%*%matrix(rnorm(2*n),n,2)
library(fields)
n = 1000
x1 <- runif(n)
x2 <- runif(n)
x_d <- cbind(x1,x2)
dd <- as.matrix(dist(x_d,upper= TRUE, diag= TRUE))
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(n)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(n)
S     <- matrix(c(1.2,0.9,0.9,3),2,2)
data <- t(t(chol(S))%*%matrix(rnorm(2*n),2,n))
data
library(fields)
n = 1000
x1 <- runif(n)
x2 <- runif(n)
x_d <- cbind(x1,x2)
dd <- as.matrix(dist(x_d,upper= TRUE, diag= TRUE))
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2, phi = 1.0)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2, phi = 1.0)
mean1 <- sqrt(2)*t(chol(mat_v1))%*%rnorm(n)
mean2 <- sqrt(3)*t(chol(mat_v2))%*%rnorm(n)
S     <- matrix(c(1.2,0.9,0.9,3),2,2)
Y <- t(t(chol(S))%*%matrix(rnorm(2*n),2,n)) + cbind(mean1,mean2)
sampleGP_mean(Y,SIG,v){
TV <- solve(diag(nrow(Y))*(1/v)+SIG)
TM <- TV%*%(Y*(1/v))
rM <- t(chol(TV))%*%rnorm(nrow(Y)) + TV
return(rM)
}
sampleGP_mean <- function(Y,SIG,v){
TV <- solve(diag(nrow(Y))*(1/v)+SIG)
TM <- TV%*%(Y*(1/v))
rM <- t(chol(TV))%*%rnorm(nrow(Y)) + TV
return(rM)
}
?Matern
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2)
?tryCatch
sample_phi_nu <- function(Y,cur_nu,cur_phi,dd,cur_SIG,var,sil,nu_bounds,phi_bounds){
new_nu  <- runif(1,-0.15,0.15) + cur_nu
new_phi <- runif(1,-0.025,0.025) + cur_phi
#new_phi <-  cur_phi
new_SIG <-  Matern(dd,range = new_phi, smoothness = new_nu)
returnV <-  list(nu = cur_nu, phi=cur_phi,SIG = cur_SIG)
if ( between(new_nu,nu_bounds[1],nu_bounds[2]) &&
between(new_phi,phi_bounds[1],phi_bounds[2])){
NSIG <- (sil)*new_SIG + (var)*diag(length(Y))
CSIG <- (sil)*cur_SIG + (var)*diag(length(Y))
n_logsum <- 0.5*t(Y)%*%solve(NSIG,Y)
d_logsum <- 0.5*t(Y)%*%solve(CSIG,Y)
CHOL_NSIG <- chol(NSIG)
n_log_det <- sum(log(diag(CHOL_NSIG)))
CHOL_CSIG <- chol(CSIG)
d_log_det <- sum(log(diag(CHOL_CSIG)))
num = -n_logsum - n_log_det
den = -d_logsum - d_log_det
if (runif(1) < exp(num-den)){
returnV <- list(nu = new_nu, phi=new_phi,SIG = new_SIG)
}
}
return(returnV)
}
library(fields)
library(invgamma)
library(dplyr)
n = 1000
x1 <- runif(n)
x2 <- runif(n)
x_d <- cbind(x1,x2)
dd <- as.matrix(dist(x_d,upper= TRUE, diag= TRUE))
mat_v1 <- Matern(dd,range = 0.15, smoothness = 3.2)
mat_v2 <- Matern(dd,range = 0.15, smoothness = 1.2)
mean1 <- t(chol(2*mat_v1))%*%rnorm(n)
mean2 <- t(chol(3*mat_v2))%*%rnorm(n)
S     <- matrix(c(0.2,0,0,3),2,2)
Y     <- t(t(chol(S))%*%matrix(rnorm(2*n),2,n)) + cbind(mean1,mean2)
nu_array  <- rep(3.2,2)
phi_array <- rep(0.15,2)
sil_array <- rep(2,2)
cur_sig1 <- Matern(dd,range = phi_array[1], smoothness = nu_array[1])
cur_sig2 <- Matern(dd,range = phi_array[2], smoothness = nu_array[2])
#
#
#
#
sampleGP_mean <- function(Y,SIG,v){
TV <- SIG%*%solve(diag(length(Y))+(1/v)*SIG)
TM <- TV%*%(Y*(1/v))
rM <- t(chol(TV))%*%matrix(rnorm(nrow(Y)),nrow=nrow(Y)) + TM
return(rM)
}
#metropolis step marginalizzing out the GP
#Y ~N(0,Sigma+v*I)
#
sample_phi_nu <- function(Y,cur_nu,cur_phi,dd,cur_SIG,var,sil,nu_bounds,phi_bounds){
new_nu  <- runif(1,-0.15,0.15) + cur_nu
new_phi <- runif(1,-0.025,0.025) + cur_phi
#new_phi <-  cur_phi
new_SIG <-  Matern(dd,range = new_phi, smoothness = new_nu)
returnV <-  list(nu = cur_nu, phi=cur_phi,SIG = cur_SIG)
if ( between(new_nu,nu_bounds[1],nu_bounds[2]) &&
between(new_phi,phi_bounds[1],phi_bounds[2])){
NSIG <- (sil)*new_SIG + (var)*diag(length(Y))
CSIG <- (sil)*cur_SIG + (var)*diag(length(Y))
n_logsum <- 0.5*t(Y)%*%solve(NSIG,Y)
d_logsum <- 0.5*t(Y)%*%solve(CSIG,Y)
CHOL_NSIG <- chol(NSIG)
n_log_det <- sum(log(diag(CHOL_NSIG)))
CHOL_CSIG <- chol(CSIG)
d_log_det <- sum(log(diag(CHOL_CSIG)))
num = -n_logsum - n_log_det
den = -d_logsum - d_log_det
if (runif(1) < exp(num-den)){
returnV <- list(nu = new_nu, phi=new_phi,SIG = new_SIG)
}
}
return(returnV)
}
#
#
#
sample_sil <- function(mu,SIG,a,b){
t_b = 0.5*(t(mu)%*%solve(SIG,mu)) + b;
t_a = length(mu)/2 + a
return( rinvgamma(1,t_a,t_b))
}
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
sil_array
phi_array
nu_array
for (ii in 1:100){
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
message(sil_array[1],phi_array[1],nu_array[1])
}
for (ii in 1:100){
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
cat(sil_array[1],phi_array[1],nu_array[1])
}
for (ii in 1:100){
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
cat(sil_array[1],phi_array[1],nu_array[1],"\n")
}
for (ii in 1:100){
temp  <- sample_phi_nu(Y[,1,drop=1],nu_array[1],phi_array[1],dd,
cur_sig1,1.2,sil_array[1],c(0,10),c(0,10))
nu_array[1]  <- temp$nu
phi_array[1] <- temp$phi
cur_sig1     <- temp$SIG
mu1   <- sampleGP_mean(Y[,1,drop=F],sil_array[1]*cur_sig1,1.2)
sil_array[1] <- sample_sil(mu1,cur_sig1,1,1)
cat(sil_array[1],phi_array[1],nu_array[1],"\n")
}
M2           <- matrix(0,nrow=5,ncol=4)
colnames(M2) <- c("Dose","Resp","N","StDev")
M2[,1] <- c(0,25,50,100,200)
M2[,2] <- c(6,5.2,2.4,1.1,0.75)
M2[,3] <- c(20,20,19,20,20)
M2[,4] <- c(1.2,1.1,0.81,0.74,0.66)
model = single_continuous_fit(M2[,1,drop=FALSE], M2[,2:4], BMD_TYPE="sd", BMR=1, ewald = TRUE,
distribution = "normal",fit_type="laplace",model_type = "hill")
library(ToxicR)
M2           <- matrix(0,nrow=5,ncol=4)
colnames(M2) <- c("Dose","Resp","N","StDev")
M2[,1] <- c(0,25,50,100,200)
M2[,2] <- c(6,5.2,2.4,1.1,0.75)
M2[,3] <- c(20,20,19,20,20)
M2[,4] <- c(1.2,1.1,0.81,0.74,0.66)
model = single_continuous_fit(M2[,1,drop=FALSE], M2[,2:4], BMD_TYPE="sd", BMR=1, ewald = TRUE,
distribution = "normal",fit_type="laplace",model_type = "hil")
?ntp_shirley
a = ntp_shirley(weight ~ sex, data=ntp_weight_data)
head(a)
?ntp_williams
a = ntp_williams(weight ~ sex, data=ntp_weight_data)
head(a)
ntp_polyk(ntp_599_female$dose,ntp_599_female$adenoma,ntp_599_female$days_on_study)
a = ntp_polyk(ntp_599_female$dose,ntp_599_female$adenoma,ntp_599_female$days_on_study)
a[1]
a[2]
setwd("~/Documents/r_software/ToxicR")
roxygen2::roxygenise()
roxygen2::roxygenise()
setwd("~/Documents/r_software/ToxicR/tests")
library(testthat)
test_check("ToxicR")
tempdir()
?test_check
test_check("ToxicR",dir = tempdir())
