data_d = fit$data
IS_SUFFICIENT = FALSE
if (ncol(data_d) == 4 ){ #sufficient statistics
IS_SUFFICIENT = TRUE
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+2*se
lerror <- mean-2*se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
# Single Model
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)*1.03-min(doses))/100)
if (fit$model=="FUNL"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_FUNL_f, d=test_doses)
}
if (fit$model=="hill"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_hill_f, d=test_doses)
}
if (fit$model=="exp-3"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_3_f, d=test_doses,decrease=decrease)
}
if (fit$model=="exp-5"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_exp_5_f, d=test_doses)
}
if (fit$model=="power"){
Q <- apply(fit$mcmc_result$PARM_samples,1,cont_power_f, d=test_doses)
}
Q <- t(Q)
me <- apply(Q,2,quantile, probs = 0.5)
lq <- apply(Q,2,quantile, probs = qprob)
uq <- apply(Q,2,quantile, probs = 1-qprob)
# Continous case density?
temp_fit <- splinefun(test_doses,me)
# Geom_polygon ? etc..
plot_gg <- ggplot() +
geom_line(aes(x=test_doses,y=me),color="blue",size=2)+
labs(x="Dose", y="Response",title=paste(fit$fitted_model$full_model, "MCMC",sep=",  Fit Type: " ))+
ylim(c(min(Response,me,lq,uq)*0.95,max(Response,me,lq,uq)*1.05)) +
xlim(c(min(test_doses) - (max(test_doses)-min(test_doses))*0.075, max(test_doses)*1.05)) +
theme_minimal()
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
plot_gg<-plot_gg +
geom_segment(aes(x=fit$bmd, y=temp_fit(x=fit$bmd), xend=fit$bmd, yend=min(Response)),color="Red")
}
# Add density
if (BMD_DENSITY ==TRUE){
temp = fit$mcmc_result$BMD_samples[!is.nan(fit$mcmc_result$BMD_samples)]
temp = temp[!is.infinite(temp)]
# Dens =  density(temp,cut=c(max(test_doses)), n=512, from=0, to=max(test_doses))
Dens =  density(temp,cut=c(max(test_doses)),adjust =1.5, n=512, from=min(test_doses) to=max(test_doses))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
plot_gg<-plot_gg+geom_polygon(aes(x=c(0,D1_x,max(doses)),y=c(min(Response),min(Response)+D1_y,min(Response))), fill = "blueviolet", alpha=0.6)
}
width=3
if (IS_SUFFICIENT){
plot_gg<- plot_gg +
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="black",size=0.8,width=width)+
geom_point(aes(x=doses,y=mean),size=3, shape=21, fill="white")
}else{
data_in<-data.frame(cbind(doses,Response))
plot_gg<-plot_gg +
geom_point(data=data_in,aes(x=Dose,y=Response))
}
plot_gg <-plot_gg+geom_polygon(aes(x=c(test_doses,test_doses[length(test_doses):1]),y=c(uq,lq[length(test_doses):1])),fill="blue",alpha=0.1)
plot_gg
}
# This part matches with single_continous_fit part- SL 06/02/21
.plot.BMDcont_fit_maximized<-function(A,qprob=0.05,...){
fit<-A
density_col="blueviolet"
credint_col="azure2"
if (qprob < 0 || qprob > 0.5){
stop( "Quantile probability must be between 0 and 0.5")
}
data_d = A$data
IS_SUFFICIENT = FALSE
# Can you do this for checking number of row? because this case only has two column
# What example would be for 4 column? SL
if (ncol(data_d) == 4 ){ #sufficient statistics
IS_SUFFICIENT = TRUE
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+2*se
lerror <- mean-2*se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
# SL: Question about model fitting
# Is it a valid approach to get the fitting parameters?
# Looks like it is using a simple linear regression parameter
# -> LM is just for checking the trend decrease or increase coefficient for exponential 3 case
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
# I fixed some logic of inputs in if/else statement- they used to be fit$data
# SL : Should Plot's x axis be based on test_dose?
test_doses <- seq(min(doses),max(doses)*1.03,(max(doses)-min(doses))/300)
#Pre defined function- lm_fit can be used for fitting parameters?
if (fit$model=="FUNL"){
me <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
me <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
me <- cont_exp_3_f(fit$parameters,test_doses,decrease)
}
if (fit$model=="exp-5"){
me <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
me <- cont_power_f(fit$parameters,test_doses)
}
temp_fit <- splinefun(test_doses,me)
# I think aes y=me is not matching because me's fitting output is not matching with ...
# ggplot()+
#   geom_line(aes(x=test_doses, y=temp_fit(test_doses)))
#
plot_gg<-ggplot()+
geom_line(aes(x=test_doses,y=me),color="blue",size=2)+
labs(x="Dose", y="Response",title=paste(fit$full_model, "Maximized",sep=",  Fit Type: " ))+
theme_minimal()
# xlim(max(c(0,c(min(test_doses) - (max(test_doses)-min(test_doses))*0.075))), max(test_doses)*1.05)
# Updated max dose level not goes to below 0;
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
if (!sum(is.na(fit$bmd))){
# This is part which makes plot bit weird...
# BMD is out of bound this case -- Needed to discuss this with Matt;
# In this B fitting case problem, BMDU is way over BMD
plot_gg <- plot_gg +
geom_segment(aes(x=fit$bmd, y=temp_fit(x=fit$bmd), xend=fit$bmd, yend=min(Response,me)*0.95),color="Red")
}
}
# Assign them temporarily
width=3
if (IS_SUFFICIENT){
plot_gg<- plot_gg +
geom_errorbar(aes(x=doses, ymin=lerror, ymax=uerror),color="black",size=0.5, width=3)+
geom_point(aes(x=doses,y=mean),size=3, shape=21, fill="white")+
xlim(min(-width/2, c(min(test_doses) - (max(test_doses)-min(test_doses))*0.075)), max(test_doses)*1.05)+
ylim(c(min(Response,me)*0.95,max(Response,me)*1.05))
}else{
data_in<-data.frame(cbind(doses,Response))
plot_gg<-plot_gg +
geom_point(aes(x=doses,y=Response))+
# Added dose level can't go down less than 0
xlim(max(0, c(min(test_doses) - (max(test_doses)-min(test_doses))*0.075)), max(test_doses)*1.05)+
ylim(c(min(Response,me)*0.95,max(Response,me)*1.05))
}
# I guess we needed to add BMR information for this case?
plot_gg
}
# Base plot- MCMC or BMD?
.plot.BMDcontinuous_MA <- function(A,qprob=0.05,...){
# Should be matched with BMD_MA plots
# SL 06/02 Updated
# Later, we'll have it
density_col="blueviolet"
credint_col="azure2"
class_list <- names(A)
fit_idx    <- grep("Individual_Model",class_list)
#plot the model average curve
if ("BMDcontinuous_MA_mcmc" %in% class(A)){ # mcmc run
n_samps <- nrow(A[[fit_idx[1]]]$mcmc_result$PARM_samples)
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200)
ma_samps <- sample(fit_idx,n_samps, replace=TRUE,prob = A$posterior_probs)
temp_f   <- matrix(0,n_samps,length(test_doses))
temp_bmd <- rep(0,length(test_doses))
# 06/07/21 SL Update
IS_SUFFICIENT=FALSE
if (ncol(data_d) == 4 ){ #sufficient statistics
IS_SUFFICIENT = TRUE
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+2*se
lerror <- mean-2*se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
for (ii in 1:n_samps){
fit <- A[[fit_idx[ma_samps[ii]]]]
if (fit$model=="FUNL"){
temp_f[ii,] <- cont_FUNL_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="hill"){
temp_f[ii,] <- cont_hill_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-3"){
temp_f[ii,] <- cont_exp_3_f(fit$mcmc_result$PARM_samples[ii,],test_doses,decrease)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="exp-5"){
temp_f[ii,] <- cont_exp_5_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
if (fit$model=="power"){
temp_f[ii,] <- cont_power_f(fit$mcmc_result$PARM_samples[ii,],test_doses)
temp_bmd[ii] <- fit$mcmc_result$BMD_samples[ii]
}
}
temp_f[is.infinite(temp_f)] = NA
temp_f[abs(temp_f) > 1e10] = NA
# If temp_bmd== Inf then delete;
# Updated 06/02/21 SL
temp_bmd[is.infinite(temp_bmd)] = NA
me <- apply(temp_f,2,quantile, probs = 0.5,na.rm = TRUE) # BMD
lq <- apply(temp_f,2,quantile, probs = qprob,na.rm = TRUE) # BMDL
uq <- apply(temp_f,2,quantile, probs = 1-qprob,na.rm = TRUE) # BMDU
width=3
# 06/02/21 SL update
if (IS_SUFFICIENT){
plot_gg<-ggplot()+
geom_point(aes(x=data_d[,1],y=data_d[,2]))+
geom_errorbar(aes(x=data_d[,1], ymin=lerror, ymax=uerror),color="black",size=0.8,width=width)+
xlim(c(min(data_d[,1])-width,max(data_d[,1])*1.03))+
labs(x="Dose", y="Response",title="Continous MA fitting")+
theme_minimal()
}else{
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
labs(x="Dose", y="Response",title="Continous MA fitting")+
theme_minimal()
}
plot_gg<-plot_gg+
geom_ribbon(aes(x=test_doses,ymin=lq,ymax=uq),fill="blue",alpha=0.1)
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
# Updated to remove Inf bmd 06/02/21 SL
bmd <- quantile(temp_bmd,c(qprob,0.5,1-qprob),na.rm = TRUE)
# Compare this with BMD sample case- SL
# Why this number is so different ?
# BB$bmd
## Plot the CDF of the Posterior
## SL's comment- I think we already have MCMC sample, and we can plot bmd directly from samples
if(sum(!is.nan(test_doses) + !is.infinite(test_doses)) == 0){
temp = temp_bmd[temp_bmd < 10*max(test_doses)]
temp = temp[!is.infinite(temp_bmd)]
temp = temp[!is.na(temp)]
# Density only creates few data points SL
# Fixed part 06/04/21
Dens =  density(temp,cut=c(max(test_doses)), n=512, from=0, to=max(test_doses))
Dens$y = Dens$y/max(Dens$y) * (max(Response)-min(Response))*0.6
temp = which(Dens$x < max(test_doses))
D1_y = Dens$y[temp]
D1_x = Dens$x[temp]
qm = min(Response)
scale = (max(Response)-min(Response))/max(D1_y) *.75
# BMD MA density needs to be double checked
# It's BMD is spiky by nature of sampling I guess;
# ggplot()+
#   geom_density(aes(x=temp))+xlim(c(0,15))
#
# plot_gg<-plot_gg+
#   stat_density_ridges(aes(x=temp))
plot_gg<-plot_gg+
geom_polygon(aes(x=c(max(0,min(D1_x)),D1_x,max(0,min(D1_x))),
y=c(min(Response),min(Response)+D1_y*scale,min(Response))),
fill = "blueviolet", alpha=0.6)
}
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
# Question to Matt not sure
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
# Which one is duplicated?
# plot_gg = plot_gg +
#   geom_segment(aes(x=bmd, y=ma_mean(bmd), xend=bmd, yend=min(Response)),color="Red")
#Plot only level >2
df<-NULL
# Problem of the loop using this case- the ggplot is not added automatically,
# It replaces the last one;
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$fitted_model$parameters
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$fitted_model$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$fitted_model$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
# temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
# df<-rbind(df,temp_df)
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
# df<-rbind(df,temp_df)
#
# plot_gg<- plot_gg+
#          geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
#          theme_minimal()
# # 06/19/21 SL update
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
#SL Updated 06/18/21 -- Transparency update based on posterior probability and Y scale for dichotomous case
temp_data<-df %>%
filter(model_no==ii)
plot_gg<- plot_gg+
geom_line(data=temp_data, aes(x=x_axis,y=y_axis,color=cols),alpha=unique(temp_data$alpha_lev),show.legend=F)+
theme_minimal()
}
}
}
## I think this if-else part needs to be clear since it's already in A part ;
## Why this part is added?
else{ # mcmc run
data_d   <-  A[[fit_idx[1]]]$data
max_dose <- max(data_d[,1])
min_dose <- min(data_d[,1])
test_doses <- seq(min_dose,max_dose,(max_dose-min_dose)/200);
temp_bmd <- rep(0,length(test_doses))
if (ncol(data_d) == 4 ){ #sufficient statistics
mean <- data_d[,2,drop=F]
se   <- data_d[,4,drop=F]/sqrt(fit$data[,3,drop=F])
doses = data_d[,1,drop=F]
uerror <- mean+se
lerror <- mean-se
dose = c(doses,doses)
Response = c(uerror,lerror)
lm_fit = lm(mean ~ doses,weights = 1/se*se)
}else{
Response <- data_d[,2,drop=F]
doses = data_d[,1,drop=F]
lm_fit = lm(Response~doses)
}
if (coefficients(lm_fit)[2] < 0){
decrease = TRUE
}else{
decrease = FALSE
}
me = test_doses*0
for (ii in 1:length(fit_idx)){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
t <- cont_FUNL_f(fit$parameters,test_doses)
if(BB$posterior_probs[ii] > 0){
me = t*BB$posterior_probs[ii] + me
}
}
if (fit$model=="hill"){
t <- cont_hill_f(fit$parameters,test_doses)
# SL comment - why the name of object is BB? At the beginning it was declared as A-  05/28/21
# I guess this part should be A as well
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-3"){
t <- cont_exp_3_f(fit$parameters,test_doses,decrease)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="exp-5"){
t <- cont_exp_5_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
if (fit$model=="power"){
t <- cont_power_f(fit$parameters,test_doses)
if(A$posterior_probs[ii] > 0){
me = t*A$posterior_probs[ii] + me
}
}
}
plot_gg<-ggplot()+
geom_point(aes(x=doses,y=Response))+
xlim(c(min(doses),max(doses)*1.03))+
# Change the label for Y axis - SL 05/28/21
labs(x="Dose", y="Response",title="Continous MA fitting")+
theme_minimal()
plot_gg<-plot_gg+
geom_line(aes(x=test_doses,y=me),col="blue",size=2)
##
# Add lines to the BMD
ma_mean <- splinefun(test_doses,me)
ma_BMD = A$bmd
plot_gg = plot_gg +
geom_segment(aes(x=A$bmd, y=ma_mean(A$bmd), xend=A$bmd, yend=min(Response)),color="Red")
# Not sure about this part - SL 05/28/21
#Plot only level >2
df<-NULL
for (ii in 1:length(fit_idx)){
if (A$posterior_probs[ii]>0.05){
fit <- A[[fit_idx[ii]]]
if (fit$model=="FUNL"){
f <- cont_FUNL_f(fit$parameters,test_doses)
}
if (fit$model=="hill"){
f <- cont_hill_f(fit$parameters,test_doses)
}
if (fit$model=="exp-3"){
temp = fit$parameters
#temp = c(temp[1:2],0,temp[3],temp[4])
f <- cont_exp_3_f(temp,test_doses,decrease)
}
if (fit$model=="exp-5"){
f <- cont_exp_5_f(fit$parameters,test_doses)
}
if (fit$model=="power"){
f <- cont_power_f(fit$parameters,test_doses)
}
col = alphablend(col='coral3',A$posterior_probs[ii])
# Not using loop, but save data in the external data and load it later
temp_df<-data.frame(x_axis=test_doses,y_axis=f,cols=col,model_no=ii, alpha_lev=A$posterior_probs[ii])
df<-rbind(df,temp_df)
}
}
plot_gg<- plot_gg+
geom_line(data=df, aes(x=x_axis,y=y_axis,color=cols),alpha=0.5,show.legend=F)+
theme_minimal()
}
return(plot_gg)
}
# This part's alpha part needs to be fixed as of dichotomous case;
.plot.BMDcontinuous_MA(A)
install.packages("modules")
library(ToxicR)
library(ToxicR)
HepAd <- read.delim("BCE.txt")
ntp$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
library(ToxicR)
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
library(ToxicR)
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
library(ToxicR)
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
library(ToxicR)
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
library(ToxicR)
NTP$polyk(HepAd$Dose,HepAd$Liver.Hepatocellular.Adenoma,HepAd$Removal.Day )
install.packages("VIM")
setwd("~/Documents/work/r_software/RBMDS/ToxicR/src")
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
bob$ma_bmd
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
bob$ma_bmd
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
bob$ma_bmd
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
library(ToxicR)
doses <- c(0,0,0,0,8,8,8,8,16,16,16,16,31.25,31.25,31.25,31.25,62.5,62.5,62.5,62.5,125,125,125,125,250,250,250,250,500,500,500,500,1000,1000,1000,1000);
v1 <- c(4.881987663,4.883269599,4.899303975,5.119740361,5.347394899,5.056169068,4.928591929,4.64581676,5.177733827,5.276270042,5.303172215,5.152691118,5.418876308,5.264282441,5.43181621,5.561028456,5.355327532,5.607800005,5.444519494,5.672198171,5.41472548,5.797997863,5.931625853,5.578030536,5.902850667,5.960838843,5.333798113,5.345880118,5.613417178,6.122145972,5.457300079,5.583780586,6.38581937,5.899680475,6.12926489,5.776545018);
bob <- ma_continuous_fit(as.matrix(doses),as.matrix(v1),fit_type ="laplace",BMR = 2)
bob$ma_bmd
